//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50826.0
// 
namespace ForestFindr.WIKIpediaService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WikipediaOpenSearchResult", Namespace="http://schemas.datacontract.org/2004/07/LinqToWikipedia")]
    public partial class WikipediaOpenSearchResult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string DescriptionField;
        
        private System.Uri ImageUrlField;
        
        private string KeywordField;
        
        private string TextField;
        
        private System.Uri UrlField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Uri ImageUrl {
            get {
                return this.ImageUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageUrlField, value) != true)) {
                    this.ImageUrlField = value;
                    this.RaisePropertyChanged("ImageUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Keyword {
            get {
                return this.KeywordField;
            }
            set {
                if ((object.ReferenceEquals(this.KeywordField, value) != true)) {
                    this.KeywordField = value;
                    this.RaisePropertyChanged("Keyword");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Text {
            get {
                return this.TextField;
            }
            set {
                if ((object.ReferenceEquals(this.TextField, value) != true)) {
                    this.TextField = value;
                    this.RaisePropertyChanged("Text");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Uri Url {
            get {
                return this.UrlField;
            }
            set {
                if ((object.ReferenceEquals(this.UrlField, value) != true)) {
                    this.UrlField = value;
                    this.RaisePropertyChanged("Url");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WIKIpediaService.IWIKI")]
    public interface IWIKI {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWIKI/GetWikiOpenSearch", ReplyAction="http://tempuri.org/IWIKI/GetWikiOpenSearchResponse")]
        System.IAsyncResult BeginGetWikiOpenSearch(string pesquisa, int count, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<ForestFindr.WIKIpediaService.WikipediaOpenSearchResult> EndGetWikiOpenSearch(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWIKIChannel : ForestFindr.WIKIpediaService.IWIKI, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetWikiOpenSearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetWikiOpenSearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<ForestFindr.WIKIpediaService.WikipediaOpenSearchResult> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<ForestFindr.WIKIpediaService.WikipediaOpenSearchResult>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WIKIClient : System.ServiceModel.ClientBase<ForestFindr.WIKIpediaService.IWIKI>, ForestFindr.WIKIpediaService.IWIKI {
        
        private BeginOperationDelegate onBeginGetWikiOpenSearchDelegate;
        
        private EndOperationDelegate onEndGetWikiOpenSearchDelegate;
        
        private System.Threading.SendOrPostCallback onGetWikiOpenSearchCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public WIKIClient() {
        }
        
        public WIKIClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WIKIClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WIKIClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WIKIClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetWikiOpenSearchCompletedEventArgs> GetWikiOpenSearchCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ForestFindr.WIKIpediaService.IWIKI.BeginGetWikiOpenSearch(string pesquisa, int count, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetWikiOpenSearch(pesquisa, count, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<ForestFindr.WIKIpediaService.WikipediaOpenSearchResult> ForestFindr.WIKIpediaService.IWIKI.EndGetWikiOpenSearch(System.IAsyncResult result) {
            return base.Channel.EndGetWikiOpenSearch(result);
        }
        
        private System.IAsyncResult OnBeginGetWikiOpenSearch(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string pesquisa = ((string)(inValues[0]));
            int count = ((int)(inValues[1]));
            return ((ForestFindr.WIKIpediaService.IWIKI)(this)).BeginGetWikiOpenSearch(pesquisa, count, callback, asyncState);
        }
        
        private object[] OnEndGetWikiOpenSearch(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<ForestFindr.WIKIpediaService.WikipediaOpenSearchResult> retVal = ((ForestFindr.WIKIpediaService.IWIKI)(this)).EndGetWikiOpenSearch(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetWikiOpenSearchCompleted(object state) {
            if ((this.GetWikiOpenSearchCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetWikiOpenSearchCompleted(this, new GetWikiOpenSearchCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetWikiOpenSearchAsync(string pesquisa, int count) {
            this.GetWikiOpenSearchAsync(pesquisa, count, null);
        }
        
        public void GetWikiOpenSearchAsync(string pesquisa, int count, object userState) {
            if ((this.onBeginGetWikiOpenSearchDelegate == null)) {
                this.onBeginGetWikiOpenSearchDelegate = new BeginOperationDelegate(this.OnBeginGetWikiOpenSearch);
            }
            if ((this.onEndGetWikiOpenSearchDelegate == null)) {
                this.onEndGetWikiOpenSearchDelegate = new EndOperationDelegate(this.OnEndGetWikiOpenSearch);
            }
            if ((this.onGetWikiOpenSearchCompletedDelegate == null)) {
                this.onGetWikiOpenSearchCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetWikiOpenSearchCompleted);
            }
            base.InvokeAsync(this.onBeginGetWikiOpenSearchDelegate, new object[] {
                        pesquisa,
                        count}, this.onEndGetWikiOpenSearchDelegate, this.onGetWikiOpenSearchCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override ForestFindr.WIKIpediaService.IWIKI CreateChannel() {
            return new WIKIClientChannel(this);
        }
        
        private class WIKIClientChannel : ChannelBase<ForestFindr.WIKIpediaService.IWIKI>, ForestFindr.WIKIpediaService.IWIKI {
            
            public WIKIClientChannel(System.ServiceModel.ClientBase<ForestFindr.WIKIpediaService.IWIKI> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetWikiOpenSearch(string pesquisa, int count, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = pesquisa;
                _args[1] = count;
                System.IAsyncResult _result = base.BeginInvoke("GetWikiOpenSearch", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<ForestFindr.WIKIpediaService.WikipediaOpenSearchResult> EndGetWikiOpenSearch(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<ForestFindr.WIKIpediaService.WikipediaOpenSearchResult> _result = ((System.Collections.ObjectModel.ObservableCollection<ForestFindr.WIKIpediaService.WikipediaOpenSearchResult>)(base.EndInvoke("GetWikiOpenSearch", _args, result)));
                return _result;
            }
        }
    }
}
